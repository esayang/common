package com.sczy.common.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.sczy.common.dao.util.StringConverter;
import java.util.List;

import com.sczy.common.domain.Menu;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MENU".
*/
public class MenuDao extends AbstractDao<Menu, Long> {

    public static final String TABLENAME = "MENU";

    /**
     * Properties of entity Menu.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property RowId = new Property(1, String.class, "rowId", false, "ROW_ID");
        public final static Property Title = new Property(2, String.class, "title", false, "TITLE");
        public final static Property SortNum = new Property(3, String.class, "sortNum", false, "SORT_NUM");
        public final static Property Type = new Property(4, String.class, "type", false, "TYPE");
        public final static Property Icon = new Property(5, String.class, "icon", false, "ICON");
        public final static Property IconPatch = new Property(6, String.class, "iconPatch", false, "ICON_PATCH");
        public final static Property SharePatch = new Property(7, String.class, "sharePatch", false, "SHARE_PATCH");
        public final static Property WorkCount = new Property(8, String.class, "workCount", false, "WORK_COUNT");
        public final static Property AndroidKey = new Property(9, String.class, "androidKey", false, "ANDROID_KEY");
        public final static Property AndroidPatch = new Property(10, String.class, "androidPatch", false, "ANDROID_PATCH");
        public final static Property Remark = new Property(11, String.class, "remark", false, "REMARK");
        public final static Property ApiPatch = new Property(12, String.class, "apiPatch", false, "API_PATCH");
        public final static Property MenuState = new Property(13, int.class, "menuState", false, "MENU_STATE");
        public final static Property Classic = new Property(14, String.class, "classic", false, "CLASSIC");
    }

    private final StringConverter apiPatchConverter = new StringConverter();

    public MenuDao(DaoConfig config) {
        super(config);
    }
    
    public MenuDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MENU\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"ROW_ID\" TEXT," + // 1: rowId
                "\"TITLE\" TEXT," + // 2: title
                "\"SORT_NUM\" TEXT," + // 3: sortNum
                "\"TYPE\" TEXT," + // 4: type
                "\"ICON\" TEXT," + // 5: icon
                "\"ICON_PATCH\" TEXT," + // 6: iconPatch
                "\"SHARE_PATCH\" TEXT," + // 7: sharePatch
                "\"WORK_COUNT\" TEXT," + // 8: workCount
                "\"ANDROID_KEY\" TEXT," + // 9: androidKey
                "\"ANDROID_PATCH\" TEXT," + // 10: androidPatch
                "\"REMARK\" TEXT," + // 11: remark
                "\"API_PATCH\" TEXT," + // 12: apiPatch
                "\"MENU_STATE\" INTEGER NOT NULL ," + // 13: menuState
                "\"CLASSIC\" TEXT);"); // 14: classic
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MENU\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Menu entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String rowId = entity.getRowId();
        if (rowId != null) {
            stmt.bindString(2, rowId);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String sortNum = entity.getSortNum();
        if (sortNum != null) {
            stmt.bindString(4, sortNum);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(5, type);
        }
 
        String icon = entity.getIcon();
        if (icon != null) {
            stmt.bindString(6, icon);
        }
 
        String iconPatch = entity.getIconPatch();
        if (iconPatch != null) {
            stmt.bindString(7, iconPatch);
        }
 
        String sharePatch = entity.getSharePatch();
        if (sharePatch != null) {
            stmt.bindString(8, sharePatch);
        }
 
        String workCount = entity.getWorkCount();
        if (workCount != null) {
            stmt.bindString(9, workCount);
        }
 
        String androidKey = entity.getAndroidKey();
        if (androidKey != null) {
            stmt.bindString(10, androidKey);
        }
 
        String androidPatch = entity.getAndroidPatch();
        if (androidPatch != null) {
            stmt.bindString(11, androidPatch);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(12, remark);
        }
 
        List apiPatch = entity.getApiPatch();
        if (apiPatch != null) {
            stmt.bindString(13, apiPatchConverter.convertToDatabaseValue(apiPatch));
        }
        stmt.bindLong(14, entity.getMenuState());
 
        String classic = entity.getClassic();
        if (classic != null) {
            stmt.bindString(15, classic);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Menu entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String rowId = entity.getRowId();
        if (rowId != null) {
            stmt.bindString(2, rowId);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String sortNum = entity.getSortNum();
        if (sortNum != null) {
            stmt.bindString(4, sortNum);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(5, type);
        }
 
        String icon = entity.getIcon();
        if (icon != null) {
            stmt.bindString(6, icon);
        }
 
        String iconPatch = entity.getIconPatch();
        if (iconPatch != null) {
            stmt.bindString(7, iconPatch);
        }
 
        String sharePatch = entity.getSharePatch();
        if (sharePatch != null) {
            stmt.bindString(8, sharePatch);
        }
 
        String workCount = entity.getWorkCount();
        if (workCount != null) {
            stmt.bindString(9, workCount);
        }
 
        String androidKey = entity.getAndroidKey();
        if (androidKey != null) {
            stmt.bindString(10, androidKey);
        }
 
        String androidPatch = entity.getAndroidPatch();
        if (androidPatch != null) {
            stmt.bindString(11, androidPatch);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(12, remark);
        }
 
        List apiPatch = entity.getApiPatch();
        if (apiPatch != null) {
            stmt.bindString(13, apiPatchConverter.convertToDatabaseValue(apiPatch));
        }
        stmt.bindLong(14, entity.getMenuState());
 
        String classic = entity.getClassic();
        if (classic != null) {
            stmt.bindString(15, classic);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Menu readEntity(Cursor cursor, int offset) {
        Menu entity = new Menu( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // rowId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // title
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // sortNum
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // type
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // icon
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // iconPatch
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // sharePatch
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // workCount
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // androidKey
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // androidPatch
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // remark
            cursor.isNull(offset + 12) ? null : apiPatchConverter.convertToEntityProperty(cursor.getString(offset + 12)), // apiPatch
            cursor.getInt(offset + 13), // menuState
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14) // classic
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Menu entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setRowId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSortNum(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setType(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIcon(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIconPatch(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSharePatch(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setWorkCount(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setAndroidKey(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setAndroidPatch(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setRemark(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setApiPatch(cursor.isNull(offset + 12) ? null : apiPatchConverter.convertToEntityProperty(cursor.getString(offset + 12)));
        entity.setMenuState(cursor.getInt(offset + 13));
        entity.setClassic(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Menu entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Menu entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Menu entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
