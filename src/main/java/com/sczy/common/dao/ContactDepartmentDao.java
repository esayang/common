package com.sczy.common.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.sczy.common.domain.ContactDepartment;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CONTACT_DEPARTMENT".
*/
public class ContactDepartmentDao extends AbstractDao<ContactDepartment, String> {

    public static final String TABLENAME = "CONTACT_DEPARTMENT";

    /**
     * Properties of entity ContactDepartment.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Deptid = new Property(0, String.class, "deptid", true, "DEPTID");
        public final static Property Deptname = new Property(1, String.class, "deptname", false, "DEPTNAME");
        public final static Property Parentid = new Property(2, String.class, "parentid", false, "PARENTID");
        public final static Property ParentId = new Property(3, Long.class, "parentId", false, "PARENT_ID");
        public final static Property Deptcode = new Property(4, String.class, "deptcode", false, "DEPTCODE");
        public final static Property Fullname = new Property(5, String.class, "fullname", false, "FULLNAME");
        public final static Property Mode = new Property(6, String.class, "mode", false, "MODE");
        public final static Property Employeecount = new Property(7, int.class, "employeecount", false, "EMPLOYEECOUNT");
    }

    private DaoSession daoSession;

    private Query<ContactDepartment> contactDepartment_ChildrenQuery;

    public ContactDepartmentDao(DaoConfig config) {
        super(config);
    }
    
    public ContactDepartmentDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CONTACT_DEPARTMENT\" (" + //
                "\"DEPTID\" TEXT PRIMARY KEY NOT NULL ," + // 0: deptid
                "\"DEPTNAME\" TEXT," + // 1: deptname
                "\"PARENTID\" TEXT," + // 2: parentid
                "\"PARENT_ID\" INTEGER," + // 3: parentId
                "\"DEPTCODE\" TEXT," + // 4: deptcode
                "\"FULLNAME\" TEXT," + // 5: fullname
                "\"MODE\" TEXT," + // 6: mode
                "\"EMPLOYEECOUNT\" INTEGER NOT NULL );"); // 7: employeecount
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CONTACT_DEPARTMENT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ContactDepartment entity) {
        stmt.clearBindings();
 
        String deptid = entity.getDeptid();
        if (deptid != null) {
            stmt.bindString(1, deptid);
        }
 
        String deptname = entity.getDeptname();
        if (deptname != null) {
            stmt.bindString(2, deptname);
        }
 
        String parentid = entity.getParentid();
        if (parentid != null) {
            stmt.bindString(3, parentid);
        }
 
        Long parentId = entity.getParentId();
        if (parentId != null) {
            stmt.bindLong(4, parentId);
        }
 
        String deptcode = entity.getDeptcode();
        if (deptcode != null) {
            stmt.bindString(5, deptcode);
        }
 
        String fullname = entity.getFullname();
        if (fullname != null) {
            stmt.bindString(6, fullname);
        }
 
        String mode = entity.getMode();
        if (mode != null) {
            stmt.bindString(7, mode);
        }
        stmt.bindLong(8, entity.getEmployeecount());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ContactDepartment entity) {
        stmt.clearBindings();
 
        String deptid = entity.getDeptid();
        if (deptid != null) {
            stmt.bindString(1, deptid);
        }
 
        String deptname = entity.getDeptname();
        if (deptname != null) {
            stmt.bindString(2, deptname);
        }
 
        String parentid = entity.getParentid();
        if (parentid != null) {
            stmt.bindString(3, parentid);
        }
 
        Long parentId = entity.getParentId();
        if (parentId != null) {
            stmt.bindLong(4, parentId);
        }
 
        String deptcode = entity.getDeptcode();
        if (deptcode != null) {
            stmt.bindString(5, deptcode);
        }
 
        String fullname = entity.getFullname();
        if (fullname != null) {
            stmt.bindString(6, fullname);
        }
 
        String mode = entity.getMode();
        if (mode != null) {
            stmt.bindString(7, mode);
        }
        stmt.bindLong(8, entity.getEmployeecount());
    }

    @Override
    protected final void attachEntity(ContactDepartment entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public ContactDepartment readEntity(Cursor cursor, int offset) {
        ContactDepartment entity = new ContactDepartment( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // deptid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // deptname
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // parentid
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // parentId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // deptcode
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // fullname
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // mode
            cursor.getInt(offset + 7) // employeecount
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ContactDepartment entity, int offset) {
        entity.setDeptid(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setDeptname(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setParentid(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setParentId(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setDeptcode(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setFullname(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMode(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setEmployeecount(cursor.getInt(offset + 7));
     }
    
    @Override
    protected final String updateKeyAfterInsert(ContactDepartment entity, long rowId) {
        return entity.getDeptid();
    }
    
    @Override
    public String getKey(ContactDepartment entity) {
        if(entity != null) {
            return entity.getDeptid();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ContactDepartment entity) {
        return entity.getDeptid() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "children" to-many relationship of ContactDepartment. */
    public List<ContactDepartment> _queryContactDepartment_Children(String parentid) {
        synchronized (this) {
            if (contactDepartment_ChildrenQuery == null) {
                QueryBuilder<ContactDepartment> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Parentid.eq(null));
                contactDepartment_ChildrenQuery = queryBuilder.build();
            }
        }
        Query<ContactDepartment> query = contactDepartment_ChildrenQuery.forCurrentThread();
        query.setParameter(0, parentid);
        return query.list();
    }

}
