package com.sczy.common.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.sczy.common.domain.UserDetail;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_DETAIL".
*/
public class UserDetailDao extends AbstractDao<UserDetail, Long> {

    public static final String TABLENAME = "USER_DETAIL";

    /**
     * Properties of entity UserDetail.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, Long.class, "userId", false, "USER_ID");
        public final static Property Empid = new Property(2, String.class, "empid", false, "EMPID");
        public final static Property Empno = new Property(3, String.class, "empno", false, "EMPNO");
        public final static Property Emptname = new Property(4, String.class, "emptname", false, "EMPTNAME");
        public final static Property Deptid = new Property(5, String.class, "deptid", false, "DEPTID");
        public final static Property Deptname = new Property(6, String.class, "deptname", false, "DEPTNAME");
        public final static Property Deptfullname = new Property(7, String.class, "deptfullname", false, "DEPTFULLNAME");
        public final static Property Deptcode = new Property(8, String.class, "deptcode", false, "DEPTCODE");
        public final static Property Samaccountname = new Property(9, String.class, "samaccountname", false, "SAMACCOUNTNAME");
        public final static Property Email = new Property(10, String.class, "email", false, "EMAIL");
        public final static Property Mobile = new Property(11, String.class, "mobile", false, "MOBILE");
        public final static Property Postalcode = new Property(12, String.class, "postalcode", false, "POSTALCODE");
        public final static Property Sex = new Property(13, String.class, "sex", false, "SEX");
        public final static Property Positionname = new Property(14, String.class, "positionname", false, "POSITIONNAME");
    }

    private Query<UserDetail> user_Empt_detailsQuery;

    public UserDetailDao(DaoConfig config) {
        super(config);
    }
    
    public UserDetailDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_DETAIL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"USER_ID\" INTEGER," + // 1: userId
                "\"EMPID\" TEXT," + // 2: empid
                "\"EMPNO\" TEXT," + // 3: empno
                "\"EMPTNAME\" TEXT," + // 4: emptname
                "\"DEPTID\" TEXT," + // 5: deptid
                "\"DEPTNAME\" TEXT," + // 6: deptname
                "\"DEPTFULLNAME\" TEXT," + // 7: deptfullname
                "\"DEPTCODE\" TEXT," + // 8: deptcode
                "\"SAMACCOUNTNAME\" TEXT," + // 9: samaccountname
                "\"EMAIL\" TEXT," + // 10: email
                "\"MOBILE\" TEXT," + // 11: mobile
                "\"POSTALCODE\" TEXT," + // 12: postalcode
                "\"SEX\" TEXT," + // 13: sex
                "\"POSITIONNAME\" TEXT);"); // 14: positionname
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_DETAIL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserDetail entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(2, userId);
        }
 
        String empid = entity.getEmpid();
        if (empid != null) {
            stmt.bindString(3, empid);
        }
 
        String empno = entity.getEmpno();
        if (empno != null) {
            stmt.bindString(4, empno);
        }
 
        String emptname = entity.getEmptname();
        if (emptname != null) {
            stmt.bindString(5, emptname);
        }
 
        String deptid = entity.getDeptid();
        if (deptid != null) {
            stmt.bindString(6, deptid);
        }
 
        String deptname = entity.getDeptname();
        if (deptname != null) {
            stmt.bindString(7, deptname);
        }
 
        String deptfullname = entity.getDeptfullname();
        if (deptfullname != null) {
            stmt.bindString(8, deptfullname);
        }
 
        String deptcode = entity.getDeptcode();
        if (deptcode != null) {
            stmt.bindString(9, deptcode);
        }
 
        String samaccountname = entity.getSamaccountname();
        if (samaccountname != null) {
            stmt.bindString(10, samaccountname);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(11, email);
        }
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(12, mobile);
        }
 
        String postalcode = entity.getPostalcode();
        if (postalcode != null) {
            stmt.bindString(13, postalcode);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(14, sex);
        }
 
        String positionname = entity.getPositionname();
        if (positionname != null) {
            stmt.bindString(15, positionname);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserDetail entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(2, userId);
        }
 
        String empid = entity.getEmpid();
        if (empid != null) {
            stmt.bindString(3, empid);
        }
 
        String empno = entity.getEmpno();
        if (empno != null) {
            stmt.bindString(4, empno);
        }
 
        String emptname = entity.getEmptname();
        if (emptname != null) {
            stmt.bindString(5, emptname);
        }
 
        String deptid = entity.getDeptid();
        if (deptid != null) {
            stmt.bindString(6, deptid);
        }
 
        String deptname = entity.getDeptname();
        if (deptname != null) {
            stmt.bindString(7, deptname);
        }
 
        String deptfullname = entity.getDeptfullname();
        if (deptfullname != null) {
            stmt.bindString(8, deptfullname);
        }
 
        String deptcode = entity.getDeptcode();
        if (deptcode != null) {
            stmt.bindString(9, deptcode);
        }
 
        String samaccountname = entity.getSamaccountname();
        if (samaccountname != null) {
            stmt.bindString(10, samaccountname);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(11, email);
        }
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(12, mobile);
        }
 
        String postalcode = entity.getPostalcode();
        if (postalcode != null) {
            stmt.bindString(13, postalcode);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(14, sex);
        }
 
        String positionname = entity.getPositionname();
        if (positionname != null) {
            stmt.bindString(15, positionname);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UserDetail readEntity(Cursor cursor, int offset) {
        UserDetail entity = new UserDetail( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // empid
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // empno
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // emptname
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // deptid
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // deptname
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // deptfullname
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // deptcode
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // samaccountname
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // email
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // mobile
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // postalcode
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // sex
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14) // positionname
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserDetail entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setEmpid(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setEmpno(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setEmptname(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDeptid(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDeptname(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDeptfullname(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDeptcode(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setSamaccountname(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setEmail(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setMobile(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setPostalcode(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setSex(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setPositionname(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserDetail entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserDetail entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserDetail entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "empt_details" to-many relationship of User. */
    public List<UserDetail> _queryUser_Empt_details(Long userId) {
        synchronized (this) {
            if (user_Empt_detailsQuery == null) {
                QueryBuilder<UserDetail> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.UserId.eq(null));
                user_Empt_detailsQuery = queryBuilder.build();
            }
        }
        Query<UserDetail> query = user_Empt_detailsQuery.forCurrentThread();
        query.setParameter(0, userId);
        return query.list();
    }

}
